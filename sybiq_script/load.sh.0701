#!/usr/bin/ksh

. /sybiq/SYBASE.sh

if [ $# -eq 0 ]; then
  echo
  echo "Usage: $0 [ ongoing | ondate | day1 ]"
  echo
  exit
fi

rootdir=/sybiq/script
# datadir= data source
# loaddir= load sql source
# workdir= working dir
# donedir= data loaded successfully
# faildir= data loaded failed
workdir=$rootdir/work

type=$1
case $type in 
day1)    datadir=$rootdir/data_day1
         loaddir=$rootdir/load
         donedir=$rootdir/done_day1
         faildir=$rootdir/fail_day1
;;
ongoing) datadir=$rootdir/data_ongoing
         loaddir=$rootdir/load_ongoing
         donedir=$rootdir/done_ongoing
         faildir=$rootdir/fail_ongoing
;;
ondate)  datadir=$rootdir/data_ondate
         loaddir=$rootdir/load
         donedir=$rootdir/done_ondate
         faildir=$rootdir/fail_ondate
;;
esac

ls $datadir/*.TXT >/dev/null 2>/dev/null
if [ $? -ne 0 ]; then
  exit
fi

for i in $datadir/*.TXT ; do
filename=${i##*/}
filename=${filename%.*}
echo $filename |awk -F'.' '{print $1" "$2}' |read tablename timestamp

mv $datadir/$filename.TXT $workdir
cp $loaddir/$tablename.sql $workdir/$filename.sql 2>/dev/null
vi $workdir/$filename.sql >/dev/null <<EOF
1GOset option public.conversion_error='off';
:%s/|/#!/
Gddf'lxxxxi
:wq
EOF

if [ $type == "ongoing" ]; then
vi $workdir/$filename.sql >/dev/null <<EOF
1G03Gma24Gmb:'a,'bs/null ,$/,/
:wq
EOF
fi

cat >>$workdir/$filename.sql <<EOF
from '$workdir/$filename.TXT'
escapes off
quotes off
strip on
-- IGNORE CONSTRAINT ALL 0
MESSAGE LOG '$workdir/$filename.msg.log' ROW LOG '$workdir/$filename.row.log' ONLY LOG ALL
LOG DELIMITED BY '#!'
go
EOF

if [ $type == "ondate" ]; then
  cat -n $workdir/$filename.sql |grep -iE "load  *table  *" |awk '{print $1" "$4}' |read ln tn
  cat $workdir/$filename.sql |sed -n "1,$((ln-1))"p > $workdir/$filename.sql.new
  echo "load table ${tn}_o (" >>$workdir/$filename.sql.new
  cat $workdir/$filename.sql |sed -n "$((ln+1)),\$"p >> $workdir/$filename.sql.new
  mv -f $workdir/$filename.sql.new $workdir/$filename.sql
fi

##
## solve ting problem
##
cat $rootdir/field.lst |grep -qw "^$tablename"
if [ $? -eq 0 ]; then
  isdone=0
  cat $rootdir/field.lst |grep -w "^$tablename" |while read tn fn fl ; do
    expr $fl % 2 |read odd
    if [ $odd -eq 1 ]; then
      if [ $isdone -eq 0 ]; then
        cp $workdir/$filename.TXT $workdir/$filename.TXT.orig
        awk '{gsub("\302\043\041","\043\041",$0);printf"%s\r\n",$0}' $workdir/$filename.TXT >$workdir/$$
        mv $workdir/$$ $workdir/$filename.TXT
        isdone=1
      fi
      fl=$((fl-1))
    fi
    if [ $fl -ne 0 ]; then
      cat $rootdir/ting |cut -c 1-$fl |read ting
    else
      ting=""
    fi
    cat $workdir/$filename.sql |sed "/^$fn[ 	]/s/,/ NULL('$ting'),/" >$workdir/$filename.sql.new
    mv -f $workdir/$filename.sql.new $workdir/$filename.sql
  done
fi

isql -U hsbc -P hsbc -S hsbcdw -D hsbcdw -o $workdir/$filename.out -i $workdir/$filename.sql
#isql -U DBA -P SQL -S hsbcdw -D hsbcdw -o $workdir/$filename.out -i $workdir/$filename.sql
#dbisql -q -nogui -c "uid=DBA;pwd=SQL;eng=hsbcdw" read $workdir/$tablename.sql

# count datafile lines
#wc -l $workdir/$filename.TXT |read a b

cat $workdir/$filename.out |grep affected |sed 's/[()]//g' |read c d
if [ "x$c" = "x" ]; then
  c=0
fi
if [ $c -ne 0 ]; then
  echo "file:$i is done. ($c rows affected)"
  mv $workdir/$filename.TXT* $donedir 2>/dev/null
  mv $workdir/$filename.sql $donedir 2>/dev/null
  mv $workdir/$filename.msg.log $donedir 2>/dev/null
  mv $workdir/$filename.row.log $donedir 2>/dev/null
  mv $workdir/$filename.out $donedir 2>/dev/null
  #$rootdir/ftp.sh done $filename
else
  echo "file:$i is failed. ($c rows affected)"
  mv $workdir/$filename.TXT* $faildir 2>/dev/null
  mv $workdir/$filename.sql $faildir 2>/dev/null
  mv $workdir/$filename.msg.log $faildir 2>/dev/null
  mv $workdir/$filename.row.log $faildir 2>/dev/null
  mv $workdir/$filename.out $faildir 2>/dev/null
  #$rootdir/ftp.sh fail $filename
fi

done
